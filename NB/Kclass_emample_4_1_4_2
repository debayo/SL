'''
Naive Bayes SL Book Example 4_1 4_2
K-class
Created on Jul 1, 2013

'''
import numpy as np

def trainNB(trainingSet, lamda=0):
  # two class: 1 and 0
  dataList = trainingSet[:, 0]
  labelList = trainingSet[:, 1]
  labelSet = set(labelList)
  dataSet = []
  N = len(trainingSet)
  n = len(dataList[0])
  K = len(labelSet) 

  # get feature value set
  for i in range(n):
    dataSetDim = set([])
    for dataItem in dataList:
      dataSetDim.add(dataItem[i])
    dataSetDim = list(dataSetDim)
    dataSet.append(dataSetDim)
# for debug 
#   print 'dataSet',dataSet
#   print 'dataList',dataList
#   print 'labelList',labelList
  
# compute condition probablity
  labelOccrTimes = {}
  pLabel = {}
  for item in labelSet:
    labelOccrTimes[item] = list(labelList).count(item)
  for item in labelSet:
    pLabel[item] = 1.0 * (labelOccrTimes[item] + lamda) / (N + K * lamda)
  
  pDict = {}
  
  for item in labelSet:
    for j in range(n):
      sj = len(dataSet[j])
      for ajl in dataSet[j]:
        #class=item and feature j's value=ajl
        key = (item,j,ajl)
        count = len([sample for sample in trainingSet 
                          if sample[0][j] == ajl and sample[1] == item])
        pDict[key] = 1.0*(count + lamda) / (labelOccrTimes[item] + sj * lamda)
    

  return dataSet, labelSet, pDict, pLabel

def testNB(testData, dataSet, labelSet, pDict, pLabel):

  y = pLabel
  
  for i in range(len(testData)):
    for item in labelSet:
        y[item] *= pDict[(item,i,testData[i])]  

  sorted(y.items(), key=lambda y:y[1])
  classLabel = dict.keys(y)[0]
  print y
  print testData, 'classefied as ', classLabel


def test(testData=[2, 'S']):
    trainingSet = np.array([
                [[1, 'S'], 0],
                [[1, 'M'], 0],
                [[1, 'M'], 1],
                [[1, 'S'], 1],
                [[1, 'S'], 0],
                [[2, 'S'], 0],
                [[2, 'M'], 0],
                [[2, 'M'], 1],
                [[2, 'L'], 1],
                [[2, 'L'], 1],
                [[3, 'L'], 1],
                [[3, 'M'], 1],
                [[3, 'M'], 1],
                [[3, 'L'], 1],
                [[3, 'L'], 0]
                ])
    
    dataSet, labelSet, pDict, pLabel = trainNB(trainingSet, lamda=0)
    testNB(testData, dataSet, labelSet, pDict, pLabel)
    
    dataSet, labelSet, pDict, pLabel = trainNB(trainingSet, lamda=1)
    testNB(testData, dataSet, labelSet, pDict, pLabel)

if __name__ == '__main__':
    test()
  
